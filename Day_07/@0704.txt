============================0704======================


========================Remind=======================

# 수정 ver.
for num in range(20,100):
    if num%10:                                          # dan * 0 제외 조건
    # if num//10 in range(2,10) and num%10:           
        print(f'{num//10} * {num%10} = {(num//10) * (num%10)}')

    else: print(f'==========={num//10}단===========')   # 20,30...,90 -> 2단,3단,...,9단 출력
    
'''


# While - Continue -> 무한반복 위험	-> ctrl+c로 강제종료 후 무한반복 되는 코드 위치 참고!!
# 18.5

i=0

while True:

    if i%10 != 3: 
        i += 1
        continue

    print(i, end=" ")
    i+=1

    if i>73: break
'''
3 13 23 33 43 53 63 73
'''


'''
Teacher's set ver.
'''
lotto=set()

while len(lotto)<6:

    num=rad.randint(1,45)

    num_set = set([num])                # TypeError: 'int' object is not iterable?  

    lotto = lotto.union(num_set)

print(lotto)

''

콜렉티브 데이터 - set, dict, list, tuple, str, range -> 인덱스 지정 없이도 다음 원소를 읽는 __next__() 내부 메서드 포함

이에 적합한 데이터 형태로 추가하기 위해 [ ] 씌워서 INT - 프리미티(primitive) 타입을 콜렉티브 타입으로 전환하는 것

( [] or () or {} 


# 17.6 

'''
질문


price = int( input().strip() )
publicTrans = 1350

while price>=0:						# -> While 종료 조건
    
    price-=publicTrans
    
    if price>=0: print(f'{price}')			# -> print 조건
''' 




=========================EXAM======================


## [실습]---------------------------------------------------------
## 로또 프로그램
##      - 1~45 범위에서 중복되지 않는 6개 추출

## 접근
#       - 반복횟수: unknown -> 무한반복문   => for, while
#       - 종료조건: 중복X 6개 숫자 저장 ->  list,setm=,dict

datas=[]

# isBreak=False
while True:

    tmp = rad.randint(1,45)
    
    if tmp in datas: continue
    else: datas.append(tmp)

    if len(datas)==6: break

print(datas)
'''
[22, 31, 23, 41, 12, 38]
'''


'''
Teacher's LIST ver.
'''
lotto=[0,0,0,0,0,0]
idx=0

while True:
    num=rad.randint(1,45)

    if num not in lotto:
        lotto[idx] = num
        idx+=1
    
    if idx==6: break

print(lotto)

'''
Teacher's Dict ver.
'''

lotto={}
key=1

while len(lotto)<6:
    num=rad.randint(1,45)

    if num not in lotto.values():
        lotto[key] = num
        key+=1

print(lotto.values())


'''
Teacher's set ver.
'''
lotto=set()

while len(lotto)<6:

    num=rad.randint(1,45)

    num_set = set([num])				# TypeError: 'int' object is not iterable?  

    lotto = lotto.union(num_set)

print(lotto)


#-------------------------------------------------------------
# set 타입의 add() 메서드
#-------------------------------------------------------------

lotto=set()

while len(lotto)<6:

    num = rad.randint(1,45)
    lotto.add(num)

print(lotto)


# -----------------------------------------------------
# 리스트 전용 메서드 함수
#   - 리스트 원소/요소 제어하기 위한 함수들

# index() - 요소 인덱스를 반환하는 메서드 
#           - 왼>>>오 방향으로 탐색
#           - 없는 원소 탐색시, ERROR 발생

# count() - 데이터가 몇 개 존재하는지 갯수 계산 메서드

# -----------------------------------------------------

# 32 (중복 원소) 인덱스 찾기
datas = [32,54,11,2,32,8,26,46,23,32]

if 32 in datas:
    idx = datas.index(32)
    print(f'32의 인덱스 -> {idx}')

if 32 in datas:
    idx = datas.index(32, start=2)          # 2 -> 탐색 시작하는 인덱스 값!

datas = [32,54,11,2,32,8,26,46,23,32]
if 32 in datas:
    idx = datas.index(32)
    print(f'1st 32의 인덱스-> {idx}')

    idx = datas.index(32, idx+1)
    print(f'2nd 32의 인덱스-> {idx}')

    idx = datas.index(32, idx+1)
    print(f'3rd 32의 인덱스-> {idx}')

'''
1st 32의 인덱스-> 0
2nd 32의 인덱스-> 4
3rd 32의 인덱스-> 9
'''


# count() - 데이터가 몇 개 존재하는지 갯수 계산 메서드

# 32 의 여러 인덱스 출력 w/ for 구문

# 1st 32 인덱스 보다 큰 인덱스 위치에서 시작해서 다음 32 찾도록 

cnt = datas.count(32)
print(f'32의 개수: {cnt}개')

start_idx = 0
for i in range(cnt):

    datas.index(32, start=start_idx if not i else start_idx + 1)    
                            # 0th 원소부터 탐색하기 위해
    print(f'{i+1}번째 32의 인덱스 -> {idx}')


# -----------------------------------------------------
# List/Set/Dict 자료형과 반복문, 조건부 표현식 결합

#       - 메모리 사용량 감소 & 속도 빠름
# -----------------------------------------------------

a=[1,2,3,4,5,6]

# [3] 짝수 데이터는 3곱하고 홀수 데이터는 그대로 새로운 C 리스트에 담기

c = [num if num%2 else (num*3) for num in a]   
print(f'a=> {a}\n b=> {b}\n c=> {c}')
'''
a=> [1, 2, 3, 4, 5, 6]
b=> [1, 6, 3, 12, 5, 18]
c=> [1, 6, 3, 12, 5, 18]
'''


# -----------------------------------------------------
# Dict 전용 메서드
#           -> keys(), values(), items()

# get(key, default)  - 값 읽어오는 메서드
#                   - key에 해당하는 값 없을 시 -> default 선언값 반환
#                   - default 기본값 = None

# -----------------------------------------------------


person = {'name':'홍길동', 'age':10}

print(person.get('name'))
print(person.get('gender'))
print(person.get('gender', '없음'))

'''
홍길동
None
없음
'''
 
# -----------------------------------------------------
# Dict 자료형과 반복문, 조건부 표현식 결합

#       - 메모리 사용량 감소 & 속도 빠름
# -----------------------------------------------------


keys = ['a','b','c','d','e']


# fromkeys(key_list)        - key_list를 key로 & value는 None인 딕셔너리 생성


print(dict.fromkeys(keys))
'''
{'a': None, 'b': None, 'c': None, 'd': None, 'e': None}
'''

x={ value for key, value in dict.fromkeys(keys).items() }

print(x)
'''
{None}
'''

# 딕셔너리 생성 w/ comprehension
x = { key:value for key, value in [('age',12), ('name','홍')]}
print(x)
'''
{'age': 12, 'name': '홍'}
'''




















	


