============================0627======================

* python 버전 업데이트 보류
	- 무조건 최신 버전 패키지로 업데이트하면 안됨
	- 아직 최신 버전에 적합한 디바이스??가 준비되지 않았기 때문에

* 메모리 확보를 위해 일반적인 사용 목적은 아니지만 서로 비슷한 목적의 함수, 클래스, 변수를 모아 필요 시마다 불러들여 사용하는 그룹 
		--> 모듈 ( .py 파일1개), 패키지(파일 다수)



# ------------------------------------------------------------
# 변수 이름과 키워드
# - 키워드: 프로그래밍 언어에서 즉, 문법에 사용함을 미리 선언한 단어들
#           변수명으로 사용 불가
# ------------------------------------------------------------

print( keyword.kwlist )

'''
['False', 'None', 'True', '__peg_parser__', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']
'''

# ------------------------------------------------------------
# 변수와 메모리 관계
#   - 파이썬에서 사용하는 변수 -> 참조형 변수
#   - w.m) 메모리 힙 영역에 저장된 데이터 주소 저장
#   - id(변수명 or 데이터) -> 주소 확인 내장함수
# ------------------------------------------------------------
# 나이 저장
age = 27
number=27

# 데이터가 존재하는 주소 확인
print("id(age)=",id(age))
print("id(27)=", id(27))
print("id(number)=", id(number))

'''
id(age)= 2111393590384
id(27)= 2111393590384
id(number)= 2111393590384
'''
		-> 똑같은 메모리 주소 공유!! / 실행할 때마다 메모리 주소는 달라짐!!


# format-string(서식지정자)
#       - 화면 출력 글자를 만들고 그 글자 안에 특정결과를 출력하는 형식
# 문자열 내부 '정수'결과 넣기 : '  %d  ' %변수명 or %수식
# 문자열 내부 '실수'결과 넣기 : '  %f  ' %변수명 or %수식
# 문자열 내부 '글자'결과 넣기 : '  %s  ' %변수명 or %수식


예시)
num1 = 2
num2 = 9
print('%d + %d = %d' %(num1, num2, num1+num2))

'''
2 + 9 = 11
'''

print('%d / %d = %f' %(num2, num1, num2/num1))
print('%s / %s = %s' %(num2, num1, num2/num1))	
							-> %s로 모든 데이터타입 출력 가능

'''
9 / 2 = 4.500000
'''

# ------------------------------------------------------------
# 내장함수 print() 사용법
# - print함수의 매개변수
# - file 매개변수: 출력 데이터 파일에 기록하는 변수
# ------------------------------------------------------------

FILENAME = 'results.txt'

# 파일 쓰기모드로 열기
f= open(FILENAME, mode='w')

# 파일에 데이터 입력
print("Good Luck", file=f)

# 파일 닫기
f.close()

# ------------------------------------------------------------
# 내장함수 input() 사용법
# - 키보드로부터 입력 데이터를 받아오는 내장함수
# - 문법: input('요청문자열')
# - 특징: 입력 후 Enter키 입력이 있어야만 데이터 전달 완료
# ------------------------------------------------------------

* 1byte  = 8bit 인 이유
	- 컴퓨터/코드 언어가 미국 중심으로 발전하면서, 미국이 채택한 아스키 코드(컴퓨터에서 알파벳 나타내는 규약)체계를 따라 1바이트=8비트로 통용됨.
	- ascii 총 문자 수가 공백을 포함하여 128자
	- 7비트(2**7=128)은 데이터값 표현에(영어 알파벳 표현에 충분)
	- 나머지 1비트는 오류 검출을 위해 (패리티비트) 추가


* 인코딩
	- cp949: MS 윈도우에서 제공하는 인코딩(사람 이해 문자 -> 컴퓨터 이해 이진수 변환) 방식


# -------------------------------------------------------------
# 연산자
# -------------------------------------------------------------


# [2] 비교 연산자-----------------------------------------------
# - 종류: >,<,>=,<=,==,!=

num1 = 'aF'
num2 = 'ac'

print(f'{num1} > {num2} = {num1>num2}')
print(f'{num1} < {num2} = {num1<num2}')
print(f'{num1} >= {num2} = {num1>=num2}')
print(f'{num1} <= {num2} = {num1<=num2}')
print(f'{num1} == {num2} = {num1==num2}')
print(f'{num1} != {num2} = {num1!=num2}')
'''
aF > ac = False         -> 아스키코드 테이블 상 순서
aF < ac = True
aF >= ac = False
aF <= ac = True
aF == ac = False
aF != ac = True
'''


* 0, '' 논리 연산

num=0           
msg=""      
print(f'not {num} -> {not num}')
print(f'not {msg} -> {not msg}')

'''
not 0 -> True
not  -> True
'''




===========================과제======================

코딩 도장 논리연산자까지







	


