# -----------------------------------------------------------
# 클래스
#       - 객체지향언어에서(OOP)에서 데이터를 정의하는 자료형
#       - 데이터를 정의할 수 있는 데이터의 속성 & 기능 명시
# 
#       - 구성요소:
#               속성(attribute/field) + 기능(method)

#       - 클래스를 생성해도 바로 메모리 힙 영역에 클래스 자체가 할당되지는 않음 
#       - 클래스 바탕 객체를 생성해야 해당 객체가 힙 영역에 할당됨
# -----------------------------------------------------------



## 클래스 생성------------------------------------------------

# 클래스 정의:  햄버거를 나타내는 클래스
# 클래스 이름:  Bugger
# 클래스 속성:  번, 패티, 야채, 치즈(옵션), 브랜드
# 클래스 기능:  햄버거 설명 기능
# -----------------------------------------------------------

class Bugger:

    kind = "맥도널드"           # 모든 버거가 롯데리아일 때, 선언
                                #  이제 kind는 클래스 속성!!!! (모든 bugger 클래스에서 공통된 속성이니까)

    # 힙 영역에 객체 생성 시, 속성값 저장 기능
    def __init__(self, bread, patty, veg):  
        
        self.bread=bread            # bread,patty,veg는 클래스 선언 시 마다 상이함
        self.patty=patty            #       --> 인스턴스 속성!!!!
        self.veg  =veg

        # self.kind =kind


    # 클래스 기능 선언(method)
    def printInfo(self):            # 'self'에는 해당클래스에서 선언한 버거 인스턴스 주소가 할당됨

        print(f'브 랜 드:    {self.kind}')
        print(f'빵 종류:    {self.bread}')
        print(f'패   티:    {self.patty}')
        print(f'야   채:    {self.veg}')



# Bugger 객체 생성---------------------------------------------

# bugger1 = Bugger()

'''
TypeError: __init__() missing 4 required positional arguments: 'bread', 'patty', 'veg', and 'kind'

Bugger 클래스 내 선언한 함수 __init__ 읽음!
'''

# 불고기 버거 객체생성
bugger1 = Bugger('브리오슈', '불고기','양상추 양파 토마토')

bugger2 = Bugger('참깨곡물', '쇠고기패티', '치즈 양상추 양파 토마토')



# 버거 정보 확인
bugger1.printInfo()
'''
브 랜 드:    맥도널드
빵 종류:    브리오슈
패   티:    불고기
야   채:    양상추 양파 토마토
'''
            
bugger2.printInfo()
'''
브 랜 드:    맥도널드
빵 종류:    참깨곡물
패   티:    쇠고기패티
야   채:    치즈 양상추 양파 토마토
'''



