# -------------------------------------------------
# 제어문 - 반복문
# - 유사하거나 동일한 코드를 1번 작성으로 재사용하기 위한 방법
# - 종류: for, while
# -------------------------------------------------

## for -------------------------------------------------------
# - 시퀀스(iterable) 데이터에서 원소/요소를 하나씩 읽어올 때 사용

# - 형식
# -       for 변수명 in 시퀀스/이터러블 데이터:
# -       ---- 반복 실행 코드

msg = "Merry Christmas 2025"
#      01234567890123456789

for i in range(len(msg)):
    print(f'{msg[i]}의 코드값 -> {ord(msg[i])}', end="\t")

# another ver.
for m in msg: print(m)


## [실습]-----------------------------------------------------
# 1-100 사이 3의 배수만 저장한 리스트 출력

three=list( range(3,101,3))

for d in three: print(d, end="\t")
print("\nEND")


## [실습] str 타입의 원소를 가지는 리스트에 대해 각 원소를 정수로 형변환-------

# 기존의 리스트 원소 값을 변경 시, 해당 인덱스 필요


data=['1','5','23','753']
print(f'형변환 전 -> {data}')

for i,d in enumerate(data):
    data[i] = int(d)
print(f'형변환 후 -> {data}')


print(f'형변환 후 -> {list(map(int, data))}' )

# 주의
for d in data:
    d = int(d)      # d가 계속 갱신되어 마지막 원소 값만 d에 최종 할당됨
        


























