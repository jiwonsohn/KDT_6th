============================0701======================


========================Remind=======================

# -------------------------------------------------
# [실습] 글자(문자열) 입력 받아 코드값 출력 

# ord(문자1개) - 문자 -> 코드값 변환 내장함수

# a-z, A-Z 여부
#	data='5'
#	print('a'<data<'z' or 'A'<data<'Z')

# 입력값 1개 이상 -> len(msg) 논리 연산으로!
# 	len(msg)==0이면 False
# -------------------------------------------------

if len(msg) & ('a'<msg<'z' or 'A'<msg<'Z'):		# len(msg)==0이면 False
    print(f'{msg} 코드값 ->{ord(msg)}')
else:
    print('1개 알파벳만 입력하세요.\n입력된 데이터 확인하세요.')


# 다수 알파벳 코드값 반환				-> map으로 ord 함수 반복 적용

if len(msg)>0 and ('a'<msg<'z' or 'A'<msg<'Z'):
    print( list( map(ord, msg) ) )


# -------------------------------------------------
# [실습] 점수를 입력 받아 학점 출력
# - 학점: A+, A, A-,B+,B,B-,C+,C,C-,D+,D,D-,F

#       +(#6-##0) 0(#5) -(#0-#4)
# -------------------------------------------------

grade= {'A':90, 'B':80, 'C':70, 'D':60}
score = int(input("점수 입력:   ").strip())

if score in range(0,101):

    # A
    if score>=grade['A']:
        if score-grade['A'] == 5: grade='A'
        elif score-grade['A'] >5: grade="A+"
        else: grade="A-"

    # B
    elif score>=grade['B']:
        if score-grade['B'] == 5: grade = "B"
        elif score-grade['B'] >5: grade="B+"
        else: grade="B-"

    # C
    elif score>=grade['C']:
        if score-grade['C'] == 5: grade="C"
        elif score-grade['C'] >5: grade="C+"
        else: grade= "C-"
    
    # D
    elif score>=grade['D']:
        if score-grade['D'] == 5: grade="D"
        elif score-grade['D'] >5: grade="D+"
        else: grade= "D-"
    # F
    else: grade="F"

    print('f{score}의 학점은 {grade}')

else: print("잘못된 점수")



=========================EXAM======================
다중 조건문
조건부 표현식

# -------------------------------------------------
# 조건부 표현식
#   - 조건문을 1줄로 축약하는 문법
#   - 다중 조건문을 축약할 때
#   - 다른 프로그래밍 언어에서 삼형연산자와 유사

#   - 형식: True 실행 코드 if 조건식 else Fasle 실행코드
# -------------------------------------------------


#------------------------------------------------------------
# 조건부 표현식으로 1줄 표현
#------------------------------------------------------------
print("짝") if num%2==0 else print("홀")

print("홀") if num%2 else print("짝")

print("짝") if not num%2 else print("홀")


## [실습] 문자 1개 코드값 저장하는 조건식 작성---------------------------
##  - 알파벳(a-z, A-Z) -> 코드값
##  - 그 외 값          -> None

data='m'

# if (ord('a')<=ord(data)<=ord('z')):
if ('a'<=data<='z') or ('A'<=data<='Z'): print( ord(data) )
else: print(None)

## 조건부 표현식
print(ord(data)) if ('a'<=data<='z') or ('A'<=data<='Z') else print(None)

# 변수 선언 w/ 조건부 표현식
result=ord(data) if ('a'<=data<='z') or ('A'<=data<='Z') else None
print(f'{data}의 코드값-> {result}')



# -------------------------------------------------
# 제어문 - 반복문
# - 유사하거나 동일한 코드를 1번 작성으로 재사용하기 위한 방법
# - 종류: for, while
# -------------------------------------------------



## [실습] str 타입의 원소를 가지는 리스트에 대해 각 원소를 정수로 형변환-------

# 기존의 리스트 원소 값을 변경 시, 해당 인덱스 필요


data=['1','5','23','753']
print(f'형변환 전 -> {data}')

for i,d in enumerate(data):
    data[i] = int(d)
print(f'형변환 후 -> {data}')


print(f'형변환 후 -> {list(map(int, data))}' )

# 주의
for d in data:
    d = int(d)      # d가 계속 갱신되어 마지막 원소 값만 d에 최종 할당됨


# -------------------------------------------------
# 2진수, 8진수, 10진수, 16진수
# -------------------------------------------------

## 정수 관련 내장함수--------------------------------
## 2진수(컴퓨터), 8진수, 10진수(사람), 16진수(프로그램-임베디드/이미지 처리)

## [10진수] 0~9-> 0,1,2,3,4,5,6,7,8,9,19,11,12,13,14,15,16,17,18,19,20,...,99,100
## [ 8진수] 0~7-> 0,1,2,3,4,5,6,7,10,11,12,13,14,15,16,17,20,...
## [16진수] 0~9 A~F -> 0,1,2,...,9,A,B,C,D,E,F,10, ..., FF, 100


## bin(정수)        - 정수=>2진수 변환
#                   - 결과: 0b2진수 / str 타입

## oct(정수)    - 정수=>8진수 변환
#               - 결과: 0o8진수 / str 타입
print(8, oct(8), type(oct(8)))

## hex(정수)    - 정수=>16진수 변환
#               - 결과: 0x16진수 / str 타입

print(17, hex(17), type(hex(17)))

## 2진수,8진수,16진수 <--> 10진수 -------------------------------------

# 1) int('변환 대상값', 변환 기준값 )
int("0x11", 16)         # 17


# 2진수 -> 8진수, 16진수
# 60 ---2진수---> '0b111100'

print( oct(0b111100) )        # 2진수 -> 8진수
print( hex(0b111100) )        # 2진수 -> 16진수

'''
0o74
0x3c
'''









































	


