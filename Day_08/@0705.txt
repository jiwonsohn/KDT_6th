============================0705======================


========================Remind=======================






=========================EXAM======================

# ---------------------------------------------------------------------
# str 데이터 타입 전용 함수 즉, 메서드

# find() - 원소/요소 인덱스 찾기 메서드 ---------------------------------
#       - find(문자 1개 or 문자열)
#           - 존재하지 않는 문자/문자열에 대해 -1 반환
#       - find(타겟문자, 시작인덱스, 끝인덱스+1) 
#                   -> (시작,끝) 범위 인덱스에 대해 찾음

# index() - 원소/요소 인덱스 찾기 메서드---------------------------------
#           - index(문자 1개 or 문자열)
#           - 존재하지 않는 문자/문자열에 대해 ERROR 발생

# ---------------------------------------------------------------------

# find() - 원소/요소 인덱스 찾기 메서드 ---------------------------------
#       - find(문자 1개 or 문자열)
#       - find(타겟문자, 시작인덱스, 끝인덱스+1) 
#                   -> (시작,끝) 범위 인덱스에 대해 찾음

msg = "Hello 0705"

# 'llo' 인덱스              
idx = msg.find('llo')
print(f'llo의 인덱스: {idx}')
# llo의 인덱스: 2               # 시작 인덱스 반환

# 'llO' 인덱스              
idx = msg.find('llO')
print(f'llO의 인덱스: {idx}')
# llo의 인덱스: 2               # 없는 문자열에 대해서 -1 반환



# for문으로 특정 문자의 인덱스 찾기

msg = "Good Luck Good"
cnt = msg.count('o')                    # 문자열에서 찾으려는 특정 문자의 총 갯수
print(f'cnt=>{cnt}')
# cnt=>4

idx=-1
for n in range(cnt):

    idx = msg.find('o',idx+1)           # 0번째 인덱스부터 시작케
    print(f'{n+1}번째 o의 인덱스=> {idx}')

'''
1번째 o의 인덱스=> 1
2번째 o의 인덱스=> 2
3번째 o의 인덱스=> 11
4번째 o의 인덱스=> 12
'''


# rfind(), rindex() - 문자열 뒤에서부터 특정 문자/문자열을 찾는 메서드
#                   - rfind(타겟문자, 시작인덱스, 끝인덱스+1) -> (시작,끝) 범위 인덱스에 대해 역순으로 찾음

msg = "Happy"


# 1st 'p' 인덱스 찾기
target ='p'
idx = msg.rfind(target)
print(f'{target}의 인덱스 : {idx}')
# p의 인덱스 : 3


# 2nd 'p' 인덱스 찾기
target ='p'
idx = msg.rfind(target, 0, idx)             # 시작 idx=0, 끝 인덱스=idx(불포함!!)
print(f'{target}의 인덱스 : {idx}')
# p의 인덱스 : 2


split() - 1개의 문자열을 여러 개 문자열로 분리하는 메서드
		- 분리기준 기본값 == 공백

msg = "Happy New Year"

result = msg.split()
print(f'result-> {result}, {type(result)}')


# --------------------------------------------------------
# Iterator 객체 --> 반복자를 가지고 있는 객체 

#       - 커스텀 클래스 생성 확인
#       - 이미 Iterator 객체를 가지고 있는 객체들 확인
# --------------------------------------------------------

# _ 변수:   특별한 의미 없이 문법상 필요할 때 쓰는 변수

# dir() - 객체가 가지는 변수와 메서드를 리스트로 출력하는 내장함수

nums = [11,33,55]

print(dir(nums))


for _ in nums:

    print(_)


# __iter__() - 리스트에서 반복자(Iterator) 추출 
#               - for문으로 대체해서 리스트 출력 가능

nums = [11,33,55]
iterator = nums.__iter__()

print(iterator.__next__())      # 첫번쨰 원소 출력
print(iterator.__next__())      # 두번쨰 원소 출력
print(iterator.__next__())      # 세번쨰 원소 출력
'''
11
33
55
'''
print(iterator.__next__())      # StopIteration:


# 내장함수 iter(반복이 가능한 객체): 객체에 존재하는 반복자 추출
iterator = iter(nums)
print(iterator.__next__())
# 11


# --------------------------------------------------------
# 사용자 정의 함수

# 목적: 매개변수의 개수를 유동적으로
#       0개 - N개 까지 가능하도록

# 형태: def 함수명( *변수명 )
# --------------------------------------------------------











































	


